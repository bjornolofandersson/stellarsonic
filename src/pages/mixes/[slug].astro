---
import { getCollection, CollectionEntry } from 'astro:content';
import MusicPlaylist from '@theme/layouts/MusicPlaylist.svelte';
import Schema from '@components/MusicPlaylistSchema.astro'
import Page from '@theme/layouts/Page.astro'
import ClientPostLoader from '@components/ClientPostLoader.svelte';
import MixEditor from '@components/editor/MixEditor.svelte';
import Tracks from '@theme/components/playlist/Tracks.svelte';
import Controls from '@theme/components/playlist/Controls.svelte';

export async function getStaticPaths() {
  const docs = await getCollection('mixes');
  return docs.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

interface Props {
  // Optionally use `CollectionEntry` for type safety
  entry: CollectionEntry<'mixes'>;
}

const isDev = import.meta.env.MODE === 'development';
const { entry } = Astro.props;
const { Content } = await entry.render();
---

<Page>
  <Fragment slot="head-bottom">
    <Schema {...entry.data as any} />
  </Fragment>
  <ClientPostLoader collection="mixes" slug={entry.slug} client:only/>

  {isDev ?
    <MixEditor slug={entry.slug} client:only>
      <MusicPlaylist post={entry.data} slug={entry.slug} client:load>
        <Tracks slot="tracks" client:only />
        <Controls slot="controls" client:only />

        <Fragment slot="article">
          <Content/>
        </Fragment>
      </MusicPlaylist>
    </MixEditor>
  :
    <MusicPlaylist post={entry.data} slug={entry.slug}>
      <Tracks slot="tracks" client:only />
      <Controls slot="controls" client:only />

      <Fragment slot="article">
        <Content/>
      </Fragment>
    </MusicPlaylist>
  }
</Page>
