---
import { Entity, ModuleDescription, MountConfig } from '@lib/interfaces';
import { getServerModules, getSitemap } from '@lib/server';
import { CollectionEntry } from 'astro:content';
import PageLayout from '@layouts/Page.astro'
import EditorLoader from '@components/editor/EditorLoader.svelte';
import Schema from '@components/Schema.astro';
import { CollectionController } from '@lib/CollectionController';
import type { Page, Palette, Template } from "src/content/config";
import site from '@settings';

interface Props extends MountConfig {
  Component: any;

  entry: CollectionEntry<any>;

  title: string;

  page: Entity<Page>;

  template: Entity<Template>;
  
  palette: Entity<Palette>;

  module?: string;
}

const { Component, entry, title, page, template, palette, module, schema, editor, props } = Astro.props;
const sitemap = await getSitemap();
const { Content } = await entry.render();
const entity = CollectionController.makeEntity(entry);
const isDev = import.meta.env.MODE === 'development';
const modules = getServerModules();

const clientModules: Record<string, ModuleDescription> = {}
for (let [id, m] of Object.entries(modules)) {
  clientModules[id] = { name: m.name, icon: m.icon, collection: m.collection };
}
---

<PageLayout state={{page, template, palette, content: entity, site}} sitemap={sitemap} modules={clientModules}>
  <Fragment slot="head-bottom">
    <Schema data={schema}/>
    <title>{title}</title>
  </Fragment>

  <Fragment slot="content-editor">
    { module && <EditorLoader module={module} props={editor} client:only /> }
  </Fragment>

  <Component entity={entity} page={page} template={template} site={site} edit={isDev} {...(props || {}) }>
    <article class="article-body">
      <Content/>
    </article>
  </Component>
</PageLayout>
